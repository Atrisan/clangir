#!/usr/bin/python3

# Copyright (C) Codeplay Software Limited

#===--- sycl-clang.py.in ---------------------------------------------------===#
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===------------------------------------------------------------------------===#

import sys
import subprocess
import shlex

# run programs with
# sycl-clang.py <file> <cgeist flags> 2> /dev/null

def main():
    bin_path = "@CMAKE_RUNTIME_OUTPUT_DIRECTORY@"
    mlir_tool = bin_path + "/cgeist"
    clang_tool = bin_path + "/clang++"
    arg_file = sys.argv[1]

    # Invoke clang, capture the command line produced by clang.
    clang_args = [clang_tool, "-###", "-fsycl", "-fsycl-device-only", "-D__SYCL_DISABLE_PARALLEL_FOR_RANGE_ROUNDING__"]
    clang_args.extend(sys.argv[1:2])
    clang_res = subprocess.Popen(clang_args, stderr=subprocess.PIPE)
    output = clang_res.stderr.readlines()
    expanded_clang_args = output[5].decode("utf-8")
    split_output = shlex.split(expanded_clang_args)

    # Form the cgeist invocation command. Append the MLIR flags first, then append the clang flags after "--args".
    mlir_args = [mlir_tool]
    mlir_args.extend(sys.argv[2:])
    mlir_args.append(arg_file)
    mlir_args.append("--args")
    mlir_args.extend(split_output[1:])
    mlir_res = subprocess.Popen(mlir_args)
    mlir_res.wait()

if __name__ == "__main__":
    main()
